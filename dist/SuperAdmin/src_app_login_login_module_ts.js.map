{"version":3,"file":"src_app_login_login_module_ts.js","mappings":"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","sources":["./src/app/_service/login.service.ts","./src/app/login/forgot-password/forgot-password.component.ts","./src/app/login/forgot-password/forgot-password.component.html","./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts","./src/app/login/login/login.component.ts","./src/app/login/login/login.component.html","./src/app/login/reset-password/reset-password.component.ts","./src/app/login/reset-password/reset-password.component.html"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpErrorResponse,\n} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginService {\n  public _api_url = environment.api_url;\n  _drivingSafetyAccessToken: any;\n\n  constructor(public _http: HttpClient) {\n    this._drivingSafetyAccessToken = localStorage.getItem(\n      '_drivingSafetyAccessToken'\n    );\n    console.log(this._drivingSafetyAccessToken);\n  }\n\n  public forgetPassword(userParams: any): Observable<any> {\n    const headers = new HttpHeaders({\n      Authorization: `${this._drivingSafetyAccessToken}`,\n    });\n    const requestOptions = { headers: headers };\n    console.log(requestOptions, 'ree');\n    return this._http\n      .post(`${this._api_url}user/forgotpassword`, userParams, requestOptions)\n      .pipe(catchError(this.error));\n  }\n\n  public verifyOTP(userParams: any): Observable<any> {\n    return this._http\n      .post(`${this._api_url}user/verify-otp`, userParams)\n      .pipe(catchError(this.error));\n  }\n\n  public resetPassword(userParams: any): Observable<any> {\n    return this._http\n      .post(`${this._api_url}user/update-password`, userParams)\n      .pipe(catchError(this.error));\n  }\n\n  // Handle Errors\n  error(error: HttpErrorResponse) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\n","import { Component, OnInit, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoginService } from 'src/app/_service/login.service';\nimport { ToastrManager } from 'ng6-toastr-notifications';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgetPasswordForm: any = FormGroup;\n  verifyOTPForm: any = FormGroup;\n  submitted = false;\n  fieldTextType!: boolean;\n  userId: any;\n  isMail = false;\n  selectedLang = localStorage.getItem('selectedLang');\n\n  constructor(\n    private fb: FormBuilder,\n    private spinner: NgxSpinnerService,\n    private loginService: LoginService,\n    private _ToastrManager: ToastrManager,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.formValidation();\n  }\n\n  formValidation() {\n    this.forgetPasswordForm = this.fb.group({\n      email: [\n        '',\n        [\n          Validators.required,\n          Validators.email,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ],\n      ],\n    });\n\n    this.verifyOTPForm = this.fb.group({\n      otp: ['', [Validators.required]],\n    });\n  }\n\n  get f() {\n    return this.forgetPasswordForm.controls;\n  }\n\n  onSubmit() {\n    if (this.isMail === true) {\n      let data = this.verifyOTPForm.value;\n      data._id = this.userId;\n      this.spinner.show();\n      this.loginService.verifyOTP(data).subscribe((result) => {\n        if (result.data.status === 200) {\n          this._ToastrManager.successToastr('OTP Verified Successfully');\n          setTimeout(() => {\n            this.spinner.hide();\n            this.isMail = false;\n            this.router.navigate([`/login/reset-password/${this.userId}`]);\n          }, 1000);\n        } else {\n          this._ToastrManager.errorToastr(result.data.message);\n          this.spinner.hide();\n        }\n      });\n    } else {\n      let data = this.forgetPasswordForm.value;\n      this.spinner.show();\n      this.loginService.forgetPassword(data).subscribe({\n        next: (res) => {\n          if (res.statusCode == 200) {\n            this.userId = res?.data._id;\n            this._ToastrManager.successToastr(\n              this.selectedLang === 'en' ? res.message.en : res.message.ja\n            );\n            setTimeout(() => {\n              this.spinner.hide();\n              this.isMail = true;\n            }, 1000);\n          } else {\n            this._ToastrManager.errorToastr(\n              this.selectedLang === 'en' ? res.message.en : res.message.ja\n            );\n            this.spinner.hide();\n          }\n        },\n        error: (err) => {},\n      });\n    }\n  }\n}\n","<div class=\"container-fluid p-0\" name=\"otpVerify\" *ngIf=\"isMail\">\n  <div class=\"row\">\n    <div\n      class=\"col-lg-6 col-12 fxt-bg-img\"\n      data-bg-image=\"assets/DS/img/loginImg.png\"\n      style=\"background-image: url('assets/DS/img/loginImg.png')\"\n    ></div>\n    <div class=\"col-lg-6 col-12 fxt-bg-color\">\n      <div class=\"fxt-content\">\n        <div class=\"pg-logo\">\n          <img\n            src=\"assets/DS/img/logo-horizontal.png\"\n            alt=\"logo\"\n            style=\"height: 50px; width: 178px\"\n          />\n        </div>\n        <div class=\"fxt-form mt-5\">\n          <h2>{{'login.VerifyOTP' | translate}}</h2>\n          <form [formGroup]=\"verifyOTPForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n              <div class=\"fxt-transformY-50 fxt-transition-delay-3\">\n                <div class=\"input-container\">\n                  <i class=\"fa-solid fa-lock icon\"></i>\n                  <input\n                    class=\"input-field\"\n                    type=\"email\"\n                    placeholder=\"{{'login.EnteryourOTP' | translate}}\"\n                    formControlName=\"otp\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <div class=\"log-in-btn-wrap\">\n                <input\n                  type=\"submit\"\n                  class=\"btn-login btn-sm btn-primary btn-block\"\n                  value=\"{{'login.Verify' | translate}}\"\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container-fluid p-0\" name=\"update\" *ngIf=\"!isMail\">\n  <div class=\"row\">\n    <div\n      class=\"col-lg-6 col-12 fxt-bg-img\"\n      data-bg-image=\"assets/DS/img/loginImg.png\"\n      style=\"background-image: url('assets/DS/img/loginImg.png')\"\n    ></div>\n    <div class=\"col-lg-6 col-12 fxt-bg-color\">\n      <div class=\"fxt-content\">\n        <div class=\"pg-logo\">\n          <img\n            src=\"assets/DS/img/logo-horizontal.png\"\n            alt=\"logo\"\n            style=\"height: 50px; width: 178px\"\n          />\n        </div>\n        <div class=\"fxt-form mt-5\">\n          <h2>{{'login.ForgotPassword' | translate}}</h2>\n          <form [formGroup]=\"forgetPasswordForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n              <label>{{'login.Email' | translate}} : </label>\n              <div class=\"fxt-transformY-50 fxt-transition-delay-3\">\n                <div class=\"input-container\">\n                  <i class=\"fa-solid fa-user icon\"></i>\n                  <input\n                    type=\"email\"\n                    class=\"input-field\"\n                    placeholder=\"{{'login.Enteryouremail' | translate}}\"\n                    formControlName=\"email\"\n                    pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                    [ngClass]=\"{ 'form-submitted': submitted }\"\n                  />\n                </div>\n                <span\n                  *ngIf=\"\n                    submitted ||\n                    (f.email.errors && (f.email.dirty || f.email.touched))\n                  \"\n                >\n                  <label\n                    class=\"text-danger\"\n                    *ngIf=\"forgetPasswordForm.get('email').hasError('required')\"\n                  >\n                    {{'login.Emailisrequired!' | translate}}\n                  </label>\n                  <label\n                    class=\"text-danger\"\n                    *ngIf=\"forgetPasswordForm.get('email').hasError('pattern')\"\n                  >\n                    {{'login.Enteravalidemailaddress!' | translate}}\n                  </label>\n                </span>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <div class=\"log-in-btn-wrap\">\n                <input\n                  type=\"submit\"\n                  [disabled]=\"forgetPasswordForm.invalid\"\n                  class=\"btn-login btn-sm btn-primary btn-block\"\n                  value=\"{{'login.SendEmail' | translate}}\"\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  { path: \"\", component: LoginComponent },\n  { path: \"forgot-password\", component: ForgotPasswordComponent },\n  { path: \"reset-password/:id\", component: ResetPasswordComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms'\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login/login.component';\n\nimport { UserAuthService } from '../_service/user-auth.service';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    ForgotPasswordComponent,\n    ResetPasswordComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    LoginRoutingModule,\n    TranslateModule\n  ],\n  providers: [UserAuthService]\n})\nexport class LoginModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ToastrManager } from 'ng6-toastr-notifications';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\nimport { UserAuthService } from '../../_service/user-auth.service';\nimport { DriverService } from 'src/app/_service/driver.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  loginForm: any;\n  submitted = false;\n  Password: any;\n  roles: any;\n  fieldTextType!: boolean;\n  public selectedLang: any = 'en';\n  constructor(\n    private fb: FormBuilder,\n    private _router: Router,\n    private spinner: NgxSpinnerService,\n    private _ToastrManager: ToastrManager,\n    public _userAuthService: UserAuthService,\n    public _dservice: DriverService\n  ) {\n    if (localStorage.getItem('selectedLang')) {\n      this.selectedLang = localStorage.getItem('selectedLang');\n    }\n  }\n  ngOnInit(): void {\n    // this.selectedLang = [];\n    this.selectedLang = localStorage.getItem('selectedLang');\n    console.log(this.selectedLang, 'this.selectedLangthis.selectedLang');\n    if (this._userAuthService.IsLoggedIn()) {\n      this._router.navigate(['/dashboard']);\n    }\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.minLength(5)]],\n      password: [null, [Validators.required, Validators.minLength(5)]],\n    });\n  }\n\n  get loginform() {\n    return this.loginForm.controls;\n  }\n\n  onSubmiteLogin() {\n    this.submitted = true;\n\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.spinner.show();\n\n    let loginParams = {\n      email: this.loginForm.value.email,\n      password: this.loginForm.value.password,\n      termsCondition: true,\n      loginType: 'ADMIN',\n      deviceType: 'web',\n      selectedLang: this.selectedLang === 'en' ? 'en' : 'ja',\n    };\n    console.log(loginParams, 'loginParams');\n    this._userAuthService.login(loginParams).subscribe(\n      (res) => {\n        if (\n          res.statusCode == 200 &&\n          (res.data.roles == 'ADMIN' || res.data.roles == 'SUBADMIN')\n        ) {\n          let responData = res?.data;\n\n          localStorage.setItem('role', res.data.roles);\n          localStorage.setItem('userName', 'Admin');\n          localStorage.setItem('_id', responData._id);\n          localStorage.setItem('email', responData.email);\n          localStorage.setItem(\n            '_drivingSafetyAccessToken',\n            responData.loginToken\n          );\n          localStorage.setItem('roles', responData.roles);\n          sessionStorage.setItem(\n            '_drivingSafetyAccessToken',\n            responData.loginToken\n          );\n          sessionStorage.setItem('isLoggin', 'true');\n          localStorage.setItem('corporateCode', responData.corporateCode);\n\n          const successMessage =\n            localStorage.getItem('selectedLang') === 'en'\n              ? 'Successfull login!'\n              : 'ログインに成功しました！';\n\n          this._ToastrManager.successToastr(successMessage);\n          this._dservice.setHtoken(responData.loginToken);\n          // this._userAuthService.SharingRolesData.next(res.data.roles);\n          this._userAuthService.setSharingRolesData(res.data.roles);\n          this._userAuthService.setDefaultSearchList(responData.defaultSearch);\n          localStorage.setItem(\n            'defaultSearchList',\n            JSON.stringify(responData.defaultSearch)\n          );\n\n          setTimeout(() => {\n            this.spinner.hide();\n            if (res.data.roles === 'ADMIN') {\n              this._router.navigate(['DS']);\n            } else if (res.data.roles === 'SUBADMIN') {\n              this._router.navigate(['DS/driver']);\n            } else {\n            }\n          }, 1000);\n        } else {\n          setTimeout(() => {\n            this.spinner.hide();\n            const warningMessage =\n              localStorage.getItem('selectedLang') === 'en'\n                ? 'Invalid Credentials'\n                : '無効な資格情報';\n\n            this._ToastrManager.warningToastr(warningMessage);\n          }, 1000);\n        }\n      },\n      (error) => {\n        setTimeout(() => {\n          this.spinner.hide();\n        }, 1000);\n      }\n    );\n  }\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n}\n","<div class=\"container-fluid p-0\">\n  <div class=\"row\">\n    <div\n      class=\"col-lg-6 col-12 fxt-bg-img\"\n      data-bg-image=\"assets/DS/img/loginImg.png\"\n      style=\"background-image: url('assets/DS/img/loginImg.png')\"\n    ></div>\n    <div class=\"col-lg-6 col-12 fxt-bg-color\">\n      <div class=\"fxt-content\">\n        <div class=\"pg-logo\">\n          <img\n            src=\"assets/DS/img/logo-horizontal.png\"\n            alt=\"logo\"\n            style=\"height: 50px; width: 233px\"\n          />\n        </div>\n        <div class=\"fxt-form mt-5\">\n          <h2>{{ \"login.title\" | translate }}</h2>\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmiteLogin()\">\n            <div class=\"form-group\">\n              <label>{{ \"login.Email\" | translate }} : </label>\n              <div class=\"fxt-transformY-50 fxt-transition-delay-3\">\n                <div class=\"input-container\">\n                  <i class=\"fa-solid fa-user icon\"></i>\n                  <input\n                    class=\"input-field\"\n                    type=\"text\"\n                    formControlName=\"email\"\n                    [ngClass]=\"{ 'form-submitted': submitted }\"\n                    placeholder=\"{{ 'login.Enteryouremail' | translate }}\"\n                  />\n                </div>\n                <span\n                  *ngIf=\"\n                    submitted ||\n                    (loginform.email.errors &&\n                      (loginform.email.dirty || loginform.email.touched))\n                  \"\n                >\n                  <label\n                    class=\"text-danger\"\n                    *ngIf=\"loginForm.get('email').hasError('required')\"\n                  >\n                    {{ \"login.Emailisrequired!\" | translate }}\n                  </label>\n                  <label\n                    class=\"text-danger\"\n                    *ngIf=\"loginForm.get('email').hasError('minlength')\"\n                  >\n                    {{ \"login.Entervalidemail\" | translate }}\n                  </label>\n                </span>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <label>{{ \"login.Password\" | translate }} : </label>\n              <div class=\"input-container\">\n                <i class=\"fa-solid fa-lock icon\"></i>\n                <input\n                  [type]=\"fieldTextType ? 'text' : 'password'\"\n                  class=\"input-field\"\n                  type=\"password\"\n                  formControlName=\"password\"\n                  [ngClass]=\"{ 'form-submitted': submitted }\"\n                  placeholder=\"{{ 'login.Enteryourpassword' | translate }}\"\n                />\n                <i\n                  [ngClass]=\"{\n                    'fa-eye-slash': !fieldTextType,\n                    'fa-eye': fieldTextType\n                  }\"\n                  (click)=\"toggleFieldTextType()\"\n                  class=\"fas fa-eye-slash\"\n                  id=\"eye\"\n                ></i>\n              </div>\n              <span\n                *ngIf=\"\n                  submitted ||\n                  (loginform.password.errors &&\n                    (loginform.password.dirty || loginform.password.touched))\n                \"\n              >\n                <label\n                  class=\"text-danger\"\n                  *ngIf=\"loginForm.get('password').hasError('required')\"\n                >\n                  {{ \"login.Passwordisrequired!\" | translate }}\n                </label>\n                <label\n                  class=\"text-danger\"\n                  *ngIf=\"loginForm.get('password').hasError('minlength')\"\n                >\n                  {{ \"login.Passwordmustbeatleast5characters!\" | translate }}\n                </label>\n              </span>\n              <a class=\"forgot\" [routerLink]=\"['/login/forgot-password']\"\n                ><br />\n                {{ \"login.ForgotPassword?\" | translate }}</a\n              >\n            </div>\n            <div class=\"form-group\">\n              <div class=\"log-in-btn-wrap\">\n                <input\n                  type=\"submit\"\n                  class=\"btn-login btn btn-primary btn-block\"\n                  value=\"{{ 'login.Submit' | translate }}\"\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrManager } from 'ng6-toastr-notifications';\nimport { LoginService } from 'src/app/_service/login.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css'],\n})\nexport class ResetPasswordComponent implements OnInit {\n  resetPasswordForm: any = FormGroup;\n  submitted = false;\n  fieldTextType!: boolean;\n  fieldTextType1!: boolean;\n\n  userId: any;\n  public passwordMatched = false;\n  selectedLang = localStorage.getItem('selectedLang');\n\n  constructor(\n    private fb: FormBuilder,\n    private _ToastrManager: ToastrManager,\n    private spinner: NgxSpinnerService,\n    private loginService: LoginService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.route.paramMap.subscribe((params) => {\n      this.userId = params.get('id');\n    });\n  }\n\n  ngOnInit(): void {\n    this.formValidation();\n  }\n\n  formValidation() {\n    this.resetPasswordForm = this.fb.group({\n      password: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern(\n            '(?=\\\\D*\\\\d)(?=[^a-z]*[a-z])(?=[^A-Z]*[A-Z])(?=.*[!@#$%^&*]).{8,}'\n          ),\n        ],\n      ],\n      confirmPassword: [''],\n    });\n  }\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n\n  toggleFieldTextType1() {\n    this.fieldTextType1 = !this.fieldTextType1;\n  }\n\n  get f() {\n    return this.resetPasswordForm.controls;\n  }\n\n  onSubmit() {\n    let data = this.resetPasswordForm.value;\n    data._id = this.userId;\n    this.spinner.show();\n    this.loginService.resetPassword(data).subscribe((result) => {\n      if (result.statusCode === 200) {\n        this._ToastrManager.successToastr(\n          this.selectedLang === 'en' ? result.message.en : result.message.ja\n        );\n        setTimeout(() => {\n          this.spinner.hide();\n          this.router.navigate(['/login']);\n        }, 1000);\n      }\n    });\n  }\n\n  checkMatch(pwd1: string, pwd2: string) {\n    this.passwordMatched = pwd1 == pwd2 ? true : false;\n  }\n}\n","<div class=\"container-fluid p-0\" name=\"reset-password\">\n  <div class=\"row\">\n    <div\n      class=\"col-lg-6 col-12 fxt-bg-img\"\n      data-bg-image=\"assets/DS/img/loginImg.png\"\n      style=\"background-image: url('assets/DS/img/loginImg.png')\"\n    ></div>\n    <div class=\"col-lg-6 col-12 fxt-bg-color\">\n      <div class=\"fxt-content\">\n        <div class=\"pg-logo\">\n          <img\n            src=\"assets/DS/img/logo-horizontal.png\"\n            alt=\"logo\"\n            style=\"height: 50px; width: 178px\"\n          />\n        </div>\n        <div class=\"fxt-form mt-5\">\n          <h2>{{ \"login.ResetPassword\" | translate }}</h2>\n          <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n              <label>{{ \"login.Password\" | translate }} : </label>\n\n              <div class=\"fxt-transformY-50 fxt-transition-delay-3\">\n                <div class=\"input-container\">\n                  <i class=\"fa-solid fa-lock icon\"></i>\n                  <input\n                    [type]=\"fieldTextType ? 'text' : 'password'\"\n                    type=\"password\"\n                    placeholder=\"{{ 'login.Enteryourpassword' | translate }}\"\n                    id=\"password\"\n                    #password\n                    pattern=\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$\"\n                    class=\"input-field\"\n                    formControlName=\"password\"\n                    [ngClass]=\"{ 'form-submitted': submitted }\"\n                  />\n                  <i\n                    [ngClass]=\"{\n                      'fa-eye-slash': !fieldTextType,\n                      'fa-eye': fieldTextType\n                    }\"\n                    (click)=\"toggleFieldTextType()\"\n                    class=\"fas fa-eye-slash\"\n                    id=\"eye\"\n                  ></i>\n                </div>\n                <span\n                  *ngIf=\"\n                    submitted ||\n                    (f.password.errors &&\n                      (f.password.dirty || f.password.touched))\n                  \"\n                >\n                  <label\n                    class=\"text-danger\"\n                    *ngIf=\"\n                      resetPasswordForm.get('password').hasError('required')\n                    \"\n                  >\n                    {{ \"login.Passwordisrequired!\" | translate }}\n                  </label>\n                  <label\n                    class=\"text-danger\"\n                    *ngIf=\"\n                      resetPasswordForm.get('password').hasError('pattern')\n                    \"\n                  >\n                    {{\n                      \"login.Mustcontainatleastonenumber,oneuppercaseandonelowercaseletter,onespecialcharacter,and atleast8characters.\"\n                        | translate\n                    }}\n                  </label>\n                </span>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <label>{{ \"login.ConfirmPassword\" | translate }} : </label>\n\n              <div class=\"fxt-transformY-50 fxt-transition-delay-3\">\n                <div class=\"input-container\">\n                  <i class=\"fa-solid fa-lock icon\"></i>\n                  <input\n                    [type]=\"fieldTextType1 ? 'text' : 'password'\"\n                    class=\"input-field\"\n                    id=\"confirmPassword\"\n                    formControlName=\"confirmPassword\"\n                    placeholder=\"{{ 'login.EnterConfirmPassword' | translate }}\"\n                    #confirmPassword\n                    (input)=\"checkMatch(password.value, confirmPassword.value)\"\n                  />\n                  <i\n                    [ngClass]=\"{\n                      'fa-eye-slash': fieldTextType1,\n                      'fa-eye': fieldTextType1\n                    }\"\n                    (click)=\"toggleFieldTextType1()\"\n                    class=\"fas fa-eye-slash\"\n                    id=\"eye\"\n                  ></i>\n                </div>\n                <div\n                  *ngIf=\"!this.passwordMatched && confirmPassword.value != ''\"\n                  class=\"text-danger\"\n                >\n                  {{ \"login.Passwordnotmatched\" | translate }}\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <div class=\"log-in-btn-wrap\">\n                <input\n                  type=\"submit\"\n                  [disabled]=\"resetPasswordForm.invalid || !passwordMatched\"\n                  class=\"btn-login btn-sm btn-primary btn-block\"\n                  value=\"{{ 'login.ResetPassword' | translate }}\"\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}